# docker-compose.yml - Complete Docker Setup

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: botspot-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: botspot-veo3
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - botspot-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional - for rate limiting, sessions)
  redis:
    image: redis:7-alpine
    container_name: botspot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - botspot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Veo 3 API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: botspot-veo3-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      MONGO_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-changeme}@mongodb:27017/botspot-veo3?authSource=admin
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./output:/app/output
    networks:
      - botspot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: botspot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - botspot-network

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  botspot-network:
    driver: bridge

---
# Dockerfile - Node.js Application Container

FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# Build stage
FROM base AS builder
WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodejs

# Copy dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --chown=nodejs:nodejs . .

# Create required directories
RUN mkdir -p logs output && \
    chown -R nodejs:nodejs logs output

USER nodejs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node healthcheck.js || exit 1

CMD ["node", "server.js"]

---
# .env.example - Environment Variables Template

# API Configuration
PORT=3000
NODE_ENV=production
API_VERSION=1.0.0

# Google Veo 3 API
GEMINI_API_KEY=your_gemini_api_key_here

# MongoDB
MONGO_URI=mongodb://localhost:27017/botspot-veo3
MONGO_ROOT_USER=admin
MONGO_ROOT_PASSWORD=changeme

# Redis (optional)
REDIS_URL=redis://localhost:6379

# CORS
CORS_ORIGIN=*

# Logging
LOG_LEVEL=info

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Video Generation Defaults
DEFAULT_MODEL=veo-3-fast-generate-001
DEFAULT_RESOLUTION=1080p
DEFAULT_ASPECT_RATIO=16:9
DEFAULT_DURATION=8

# File Storage
OUTPUT_DIR=./output
MAX_FILE_SIZE_MB=100

---
# nginx/nginx.conf - Nginx Configuration

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_status 429;

    upstream api_backend {
        server api:3000;
    }

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name _;

        # SSL certificates (replace with your own)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # API endpoints
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts for long-running video generation
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://api_backend/api/health;
            access_log off;
        }

        # Static files (if any)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}

---
# healthcheck.js - Docker Health Check Script

const http = require('http');

const options = {
  host: 'localhost',
  port: process.env.PORT || 3000,
  path: '/api/health',
  timeout: 5000
};

const request = http.request(options, (res) => {
  console.log(`Health check status: ${res.statusCode}`);
  
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

request.on('error', (err) => {
  console.error('Health check failed:', err);
  process.exit(1);
});

request.on('timeout', () => {
  console.error('Health check timeout');
  request.destroy();
  process.exit(1);
});

request.end();

---
# package.json - NPM Dependencies

{
  "name": "botspot-veo3-api",
  "version": "1.0.0",
  "description": "Botspot Video Generation API with Google Veo 3",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "node veo3-service.js",
    "seed": "node models.js",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:restart": "docker-compose restart api"
  },
  "dependencies": {
    "@google/genai": "^0.3.0",
    "axios": "^1.6.0",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "helmet": "^7.1.0",
    "joi": "^17.11.0",
    "mongoose": "^8.0.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

---
# Makefile - Deployment Commands

.PHONY: help install dev build up down logs restart clean test

help:
	@echo "Botspot Veo 3 API - Available Commands:"
	@echo "  make install    - Install dependencies"
	@echo "  make dev        - Run development server"
	@echo "  make test       - Run unit tests"
	@echo "  make build      - Build Docker containers"
	@echo "  make up         - Start all services"
	@echo "  make down       - Stop all services"
	@echo "  make logs       - View logs"
	@echo "  make restart    - Restart API service"
	@echo "  make clean      - Clean volumes and containers"

install:
	npm install

dev:
	npm run dev

test:
	npm test

build:
	docker-compose build

up:
	docker-compose up -d
	@echo "âœ… Services started!"
	@echo "API: http://localhost:3000"
	@echo "MongoDB: mongodb://localhost:27017"

down:
	docker-compose down

logs:
	docker-compose logs -f api

restart:
	docker-compose restart api

clean:
	docker-compose down -v
	rm -rf logs/* output/*

---
# README.md - Deployment Instructions

# Botspot Veo 3 API Deployment

## Quick Start

### 1. Clone and Setup
```bash
git clone <repo>
cd botspot-veo3-api
cp .env.example .env
```

### 2. Configure Environment
Edit `.env` and set:
- `GEMINI_API_KEY` - Your Google Gemini API key
- `MONGO_ROOT_PASSWORD` - Secure MongoDB password

### 3. Deploy with Docker
```bash
# Build containers
make build

# Start services
make up

# Check logs
make logs
```

### 4. Test API
```bash
curl http://localhost:3000/api/health
```

## Manual Setup (Without Docker)

### Prerequisites
- Node.js 18+
- MongoDB 7+
- Redis (optional)

### Install & Run
```bash
npm install
npm run seed  # Seed database
npm start
```

## API Endpoints

- `GET /api/health` - Health check
- `POST /api/videos/generate` - Generate video
- `POST /api/videos/estimate-cost` - Estimate cost
- `GET /api/models` - List models
- `GET /api/templates` - Get templates

## Monitoring

View logs:
```bash
make logs
```

Check service status:
```bash
docker-compose ps
```

## Troubleshooting

**API won't start:**
```bash
docker-compose logs api
```

**Database connection issues:**
```bash
docker-compose restart mongodb
```

**Clear all data:**
```bash
make clean
make up
```